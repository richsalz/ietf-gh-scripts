#! /usr/bin/env python
"""
Create an IETF WG repository for an I-D
"""

import argparse, sys
import ietf_gh_utils as UTILS

# Parse command line.
parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('--wg', '-w', required=True)
parser.add_argument('--doc', '-d', metavar='DOCNAME', required=True)
parser.add_argument('--editor', '-e', metavar='GH_ID', action='append',
                    required=True,
                    help="(can be repeated, must be at least once)")
parser.add_argument('--default-branch', '-b', action='store', default='master',
                    help="Name the primary branch in the repository")
UTILS.add_gh_auth_arguments(parser)
args = parser.parse_args(sys.argv[1:])

WGNAME = args.wg
DOCNAME = args.doc
EDITORS = args.editor

# Fix doc name: remove draft- ietf- $WGNAME- from front
while True:
    for prefix in ( 'draft-', 'ietf-', WGNAME+'-'):
        found = False
        if DOCNAME.startswith(prefix):
            DOCNAME = DOCNAME[len(prefix):]
            found = True
    if not found:
        break
if len(DOCNAME) == 0:
    raise SystemExit("Docname is all prefixes!")

# Login
G,USER = UTILS.gh_login(args)

# Verify user names
if not UTILS.verify_users(G, EDITORS):
    raise SystemExit("Missing GH accounts");

# See if organization exists.
WGNAME = UTILS.fix_wg_name(WGNAME)
DOC="draft-" + WGNAME + "-" + DOCNAME
ORG = 'ietf-wg-' + WGNAME
if not UTILS.org_exists(G, ORG):
    raise SystemExit("Organization not found; try mk-ietf-wg")
o = G.get_organization(ORG)

# Create an editors team and populate it
editors = o.create_team(DOC, privacy='closed')
editors.add_membership(G.get_user(USER))
done = [ USER ]
for e in EDITORS:
    if e not in done:
        editors.add_membership(G.get_user(e))
        done += [ e ]
# Add the "owners" people?

# Create repository draft-$WGNAME-$DOCNAME
repo = o.create_repo(DOC,
        description="Repository for " + DOC + " draft",
        has_issues=True, # Probably the default, but this is funny
        team_id=editors.id
        )

# Remove pre-populated labels, add ours.
for label in repo.get_labels():
    label.delete()
repo.create_label("editorial", "41d366")
repo.create_label("design", "1d76db")
repo.create_label("parked", "f9d0c4")

# Create template files
with open("CONTRIBUTING.md", "w") as F:
    text = open("contributing.txt").read()
    F.write(text % vars())
with open("draft-ietf-%(WGNAME)s-%(DOCNAME)s.md" % vars(), "w") as F:
    F.write("""---
docname: draft-ietf-%(WGNAME)s-%(DOCNAME)s-latest
title: The %(DOCNAME)s draft
date: {DATE}

workgroup: %(WGNAME)s
keyword: Internet-Draft

stand_alone: yes
pi: [toc, sortrefs, symrefs]

--- abstract

Content here.
""" % vars())

DEFAULT_BRANCH = args.default_branch

print """Run the following commands:
    git clone https://github.com/%(ORG)s/%(DOC)s
    cd %(DOC)s
    git remote set-url origin git@github.com:/ietf-wg-%(WGNAME)s/%(DOC)s
    git checkout --orphan %(DEFAULT_BRANCH)s
    cp ../CONTRIBUTING.md .
    git add CONTRIBUTING.md
    # If you need an empty draft:
    cp ../draft-ietf-%(WGNAME)s-%(DOCNAME)s.md .
    git add %(DOC)s.md
    git commit -m 'Initial docs' .
    git push --set-upstream origin %(DEFAULT_BRANCH)s
    git clone https://github.com/martinthomson/i-d-template lib
    # MAKE SURE YOU HAVE kramdown ETC INSTALLED!
    # (See https://github.com/martinthomson/i-d-template/blob/master/doc/SETUP.md)
    make -f lib/setup.mk
    git push
""" % vars()
