#! /usr/bin/env python
"""
Create an IETF WG organization and infrastructure

Flags:
    --wg WGNAME
    --chair GH_ID (can be repeated, must be at least once)
    --ad GH_ID (can be repeated, must be at least once)
    --np name:pass Github login credentials
"""

import argparse, sys
import ietf_gh_utils as UTILS

# Parse command line.
parser = argparse.ArgumentParser(
    description="Create an IETF WG organization and infrastructure")
parser.add_argument('--wg', '-w', required=True)
parser.add_argument('--chair', '-c', metavar='GH_ID', action='append', required=True,
                    help="(can be repeated, must be at least once)")
parser.add_argument('--ad', '-a', metavar='GH_ID', action='append', required=True,
                    help="(can be repeated, must be at least once)")
UTILS.add_gh_auth_arguments(parser)
args = parser.parse_args(sys.argv[1:])

WGNAME = args.wg
CHAIRS = args.chair
ADS = args.ad

# Login
G,USER = UTILS.gh_login(args)

# Verify user names
if not UTILS.verify_users(G, CHAIRS) or not UTILS.verify_users(G, ADS):
    raise SystemExit("Missing GH accounts");

# See if organization exists.
WGNAME = UTILS.fix_wg_name(WGNAME)
ORG = 'ietf-wg-' + WGNAME
if not UTILS.org_exists(G, ORG):
    text = open("creating-org.txt").read()
    print text % vars()
    raise SystemExit

# Populate some organization meta-data
o = G.get_organization(ORG)
o.edit(
    company="Internet Engineering Task Force",
    description="The " + WGNAME + " working group",
    email=WGNAME + "@ietf.org"
    )

# Creates an "owners" team of the chairs and AD's
owners = o.create_team("owners", privacy='closed')
owners.add_membership(G.get_user(USER))
done = [ USER ]
for m in ADS + CHAIRS:
    if m not in done:
        owners.add_membership(G.get_user(m))
        done += [ m ]

# Create a wg-materials repo, owned by the "owners" team.
REPO="wg-materials"
o.create_repo(REPO,
        description="Repository for meeting materials",
        has_issues=True, # Probably the default, but this is funny
        team_id=owners.id)

with open("CONTRIBUTING.md", "w") as F:
    text = open("contributing.txt").read()
    F.write(text % vars())
with open("WG-README.md", "w") as F:
    text = open("wg-readme.txt").read()
    F.write(text % vars())

print """Run the following commands:
    git clone https://github.com/%(ORG)s/%(REPO)s
    cd %(REPO)s
    git remote set-url origin git@github.com:/%(ORG)s/%(REPO)s
    cp ../CONTRIBUTING.md .
    git add CONTRIBUTING.md
    cp ../WG-README.md README.md
    git add README.md
    git commit -m 'Initial docs' .
    git push
""" % vars()
