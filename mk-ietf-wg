#! /usr/bin/env python3
"""
Create an IETF WG organization and infrastructure
"""

import argparse, sys
import ietf_gh_utils as UTILS
import repo_utils

# Parse command line.
parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('--wg', '-w', required=True)
parser.add_argument('--chair', '-c', metavar='GH_ID', action='append', required=True,
                    help="(can be repeated, must be at least once)")
parser.add_argument('--ad', '-a', metavar='GH_ID', action='append', required=True,
                    help="(can be repeated, must be at least once)")
parser.add_argument('--default-branch', '-b', action='store', default='master',
                    help="Name the primary branch in the repository")
UTILS.add_gh_auth_arguments(parser)
args = parser.parse_args(sys.argv[1:])

WGNAME = args.wg
CHAIRS = args.chair
ADS = args.ad

# Login
G,USER = UTILS.gh_login(args)

# Verify user names
if not UTILS.verify_users(G, CHAIRS) or not UTILS.verify_users(G, ADS):
    raise SystemExit("Missing GH accounts")

# See if organization exists.
WGNAME = UTILS.fix_wg_name(WGNAME)
ORG = 'ietf-wg-' + WGNAME
if not UTILS.org_exists(G, ORG):
    text = open("creating-org.txt").read()
    print(text % vars())
    raise SystemExit

# Populate some organization meta-data
o = G.get_organization(ORG)
o.edit(
    company="Internet Engineering Task Force",
    description="The " + WGNAME + " working group",
    email=WGNAME + "@ietf.org"
    )

# Creates an "owners" team of the chairs and AD's
owners = o.create_team("owners", privacy='closed')
owners.add_membership(G.get_user(USER))
done = [ USER ]
for m in ADS + CHAIRS:
    if m not in done:
        owners.add_membership(G.get_user(m))
        done += [ m ]

# Create a wg-materials repo, owned by the "owners" team.
REPO="wg-materials"
o.create_repo(REPO,
        description="Repository for meeting materials",
        has_issues=True, # Probably the default, but this is funny
        team_id=owners.id)

initial_files = {}
initial_files["CONTRIBUTING.md"] = repo_utils.contributing(wgname=WGNAME)
text = open("wg-readme.txt").read()
initial_files["README.md"] = text % vars()

repo_utils.clone_and_create_initial_commit(
    user=ORG, repo=REPO, default_branch=args.default_branch,
    initial_files=initial_files)
